<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/DTCoreTextLayoutFrame.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/DTCoreTextLayoutFrame</TokenIdentifier>
			<Abstract>This class represents a single frame of text and basically wraps CTFrame. It provides an array of text lines that fit in the given rectangle.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>
			
			<NodeRef refid="9"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTCoreTextLayoutFrame/initWithFrame:layouter:</TokenIdentifier>
			<Abstract>Creates a Layout Frame with the given frame using the attributed string loaded into the layouter.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>- (id)initWithFrame:(CGRect)frame layouter:(DTCoreTextLayouter *)layouter</Declaration>
			<Parameters>
				<Parameter>
					<Name>frame</Name>
					<Abstract>The rectangle specifying origin and size of available for text. Specify CGFLOATOPENHEIGHT to not limit the height.</Abstract>
				</Parameter><Parameter>
					<Name>layouter</Name>
					<Abstract>A reference to the layouter for this text box.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithFrame:layouter:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTCoreTextLayoutFrame/initWithFrame:layouter:range:</TokenIdentifier>
			<Abstract>Creates a Layout Frame with the given frame using the attributed string loaded into the layouter.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>- (id)initWithFrame:(CGRect)frame layouter:(DTCoreTextLayouter *)layouter range:(NSRange)range</Declaration>
			<Parameters>
				<Parameter>
					<Name>frame</Name>
					<Abstract>The rectangle specifying origin and size of available for text. Specify CGFLOATOPENHEIGHT to not limit the height.</Abstract>
				</Parameter><Parameter>
					<Name>layouter</Name>
					<Abstract>A reference to the layouter for the receiver. Note: The layouter owns the attributed string.</Abstract>
				</Parameter><Parameter>
					<Name>range</Name>
					<Abstract>The range within the attributed string to layout into the receiver.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithFrame:layouter:range:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTCoreTextLayoutFrame/visibleStringRange</TokenIdentifier>
			<Abstract>The string range that is visible i.e. fits into the given rectangle. For open-ended frames this is typically the entire string. For frame-contrained layout frames it is the substring that fits.
  </Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>- (NSRange)visibleStringRange</Declaration>
			
			
			<Anchor>//api/name/visibleStringRange</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTCoreTextLayoutFrame/attributedStringFragment</TokenIdentifier>
			<Abstract>This is a copy of the attributed string owned by the layouter of the receiver.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>- (NSAttributedString *)attributedStringFragment</Declaration>
			
			
			<Anchor>//api/name/attributedStringFragment</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTCoreTextLayoutFrame/stringIndices</TokenIdentifier>
			<Abstract>An array that maps glyphs with string indices.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)stringIndices</Declaration>
			
			
			<Anchor>//api/name/stringIndices</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DTCoreTextLayoutFrame/frame</TokenIdentifier>
			<Abstract>The frame rectangle for the layout frame.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign, readonly) CGRect frame</Declaration>
			
			
			<Anchor>//api/name/frame</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTCoreTextLayoutFrame/drawInContext:drawImages:drawLinks:</TokenIdentifier>
			<Abstract>Draws the entire layout frame into the given graphics context.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>- (void)drawInContext:(CGContextRef)context drawImages:(BOOL)drawImages drawLinks:(BOOL)drawLinks</Declaration>
			<Parameters>
				<Parameter>
					<Name>context</Name>
					<Abstract>A graphics context to draw into</Abstract>
				</Parameter><Parameter>
					<Name>drawImages</Name>
					<Abstract>Whether hyperlinks should be drawn together with the text. If you specify NO then space is left blank where links would go and you have to add your own views to display these links.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/drawInContext:drawImages:drawLinks:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DTCoreTextLayoutFrame/textBlockHandler</TokenIdentifier>
			<Abstract>Set a custom handler to be executed before text belonging to a text block is drawn.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, copy) DTCoreTextLayoutFrameTextBlockHandler textBlockHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>handler</Name>
					<Abstract>A DTCoreTextLayoutFrameTextBlockHandler block.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/textBlockHandler</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTCoreTextLayoutFrame/lineIndexForGlyphIndex:</TokenIdentifier>
			<Abstract>Retrieves the index of the text line that contains the given glyph index.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>- (NSInteger)lineIndexForGlyphIndex:(NSInteger)index</Declaration>
			<Parameters>
				<Parameter>
					<Name>index</Name>
					<Abstract>The index of the glyph</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>The index of the line containing this glyph</Abstract></ReturnValue>
			<Anchor>//api/name/lineIndexForGlyphIndex:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTCoreTextLayoutFrame/frameOfGlyphAtIndex:</TokenIdentifier>
			<Abstract>Retrieves the frame of the glyph at the given glyph index.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>- (CGRect)frameOfGlyphAtIndex:(NSInteger)index</Declaration>
			<Parameters>
				<Parameter>
					<Name>index</Name>
					<Abstract>The index of the glyph</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>The frame of this glyph</Abstract></ReturnValue>
			<Anchor>//api/name/frameOfGlyphAtIndex:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DTCoreTextLayoutFrame/lines</TokenIdentifier>
			<Abstract>The text lines that belong to the receiver.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readonly) NSArray *lines</Declaration>
			
			
			<Anchor>//api/name/lines</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTCoreTextLayoutFrame/linesVisibleInRect:</TokenIdentifier>
			<Abstract>The text lines that are visible inside the given rectangle. Also incomplete lines are included.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)linesVisibleInRect:(CGRect)rect</Declaration>
			<Parameters>
				<Parameter>
					<Name>rect</Name>
					<Abstract>The rectangle</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>An array, sorted from top to bottom, of lines at least partially visible</Abstract></ReturnValue>
			<Anchor>//api/name/linesVisibleInRect:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTCoreTextLayoutFrame/linesContainedInRect:</TokenIdentifier>
			<Abstract>The text lines that are visible inside the given rectangle. Only fully visible lines are included.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)linesContainedInRect:(CGRect)rect</Declaration>
			<Parameters>
				<Parameter>
					<Name>rect</Name>
					<Abstract>The rectangle</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>An array, sorted from top to bottom, of lines fully visible</Abstract></ReturnValue>
			<Anchor>//api/name/linesContainedInRect:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTCoreTextLayoutFrame/lineContainingIndex:</TokenIdentifier>
			<Abstract>The layout line that contains the given string index.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>- (DTCoreTextLayoutLine *)lineContainingIndex:(NSUInteger)index</Declaration>
			<Parameters>
				<Parameter>
					<Name>index</Name>
					<Abstract>The string index</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>The layout line that this index belongs to</Abstract></ReturnValue>
			<Anchor>//api/name/lineContainingIndex:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTCoreTextLayoutFrame/isLineFirstInParagraph:</TokenIdentifier>
			<Abstract>Determins if the given line is the first in a paragraph.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isLineFirstInParagraph:(DTCoreTextLayoutLine *)line</Declaration>
			<Parameters>
				<Parameter>
					<Name>line</Name>
					<Abstract>The Line</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>YES if the given line is the first in a paragraph</Abstract></ReturnValue>
			<Anchor>//api/name/isLineFirstInParagraph:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTCoreTextLayoutFrame/isLineLastInParagraph:</TokenIdentifier>
			<Abstract>Determins if the given line is the last in a paragraph.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isLineLastInParagraph:(DTCoreTextLayoutLine *)line</Declaration>
			<Parameters>
				<Parameter>
					<Name>line</Name>
					<Abstract>The Line</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>YES if the given line is the last in a paragraph</Abstract></ReturnValue>
			<Anchor>//api/name/isLineLastInParagraph:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTCoreTextLayoutFrame/baselineOriginToPositionLine:afterLine:</TokenIdentifier>
			<Abstract>Finds the appropriate baseline origin for a line to position it at the correct distance from a previous line.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>- (CGPoint)baselineOriginToPositionLine:(DTCoreTextLayoutLine *)line afterLine:(DTCoreTextLayoutLine *)previousLine</Declaration>
			<Parameters>
				<Parameter>
					<Name>line</Name>
					<Abstract>The line</Abstract>
				</Parameter><Parameter>
					<Name>previousLine</Name>
					<Abstract>The line after which to position the line.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>The correct baseline origin for the line.</Abstract></ReturnValue>
			<Anchor>//api/name/baselineOriginToPositionLine:afterLine:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTCoreTextLayoutFrame/textAttachments</TokenIdentifier>
			<Abstract>The array of all DTTextAttachment instances that belong to the receiver.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)textAttachments</Declaration>
			
			<ReturnValue><Abstract>All text attachments of the receiver.</Abstract></ReturnValue>
			<Anchor>//api/name/textAttachments</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTCoreTextLayoutFrame/textAttachmentsWithPredicate:</TokenIdentifier>
			<Abstract>The array of all DTTextAttachment instances that belong to the receiver which also match the specified predicate.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)textAttachmentsWithPredicate:(NSPredicate *)predicate</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract>A predicate that uses properties of DTTextAttachment to reduce the returned array</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>A filtered array of text attachments.</Abstract></ReturnValue>
			<Anchor>//api/name/textAttachmentsWithPredicate:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTCoreTextLayoutFrame/paragraphIndexContainingStringIndex:</TokenIdentifier>
			<Abstract>Finding which paragraph a given string index belongs to.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>- (NSUInteger)paragraphIndexContainingStringIndex:(NSUInteger)stringIndex</Declaration>
			<Parameters>
				<Parameter>
					<Name>stringIndex</Name>
					<Abstract>The index in the string to look for</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>The index of the paragraph, numbered from 0</Abstract></ReturnValue>
			<Anchor>//api/name/paragraphIndexContainingStringIndex:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTCoreTextLayoutFrame/paragraphRangeContainingStringRange:</TokenIdentifier>
			<Abstract>Determines the paragraph range (of paragraph indexes) that encompass the entire given string Range.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>- (NSRange)paragraphRangeContainingStringRange:(NSRange)stringRange</Declaration>
			<Parameters>
				<Parameter>
					<Name>stringRange</Name>
					<Abstract>The string range for which the paragraph range is sought for</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>The range of paragraphs that fully enclose the string range</Abstract></ReturnValue>
			<Anchor>//api/name/paragraphRangeContainingStringRange:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTCoreTextLayoutFrame/linesInParagraphAtIndex:</TokenIdentifier>
			<Abstract>The text lines that belong to the specified paragraph.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)linesInParagraphAtIndex:(NSUInteger)index</Declaration>
			<Parameters>
				<Parameter>
					<Name>index</Name>
					<Abstract>The index of the paragraph</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>An array, sorted from top to bottom, of lines in this paragraph</Abstract></ReturnValue>
			<Anchor>//api/name/linesInParagraphAtIndex:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DTCoreTextLayoutFrame/paragraphRanges</TokenIdentifier>
			<Abstract>An array of NSRange values encapsulated in NSValue instances. Each range is the string range contained in the corresponding paragraph.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readonly) NSArray *paragraphRanges</Declaration>
			
			
			<Anchor>//api/name/paragraphRanges</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/DTCoreTextLayoutFrame/setShouldDrawDebugFrames:</TokenIdentifier>
			<Abstract>Switches on the debug drawing mode where individual glph runs, baselines, et ceter get individually marked.</Abstract>
			<DeclaredIn>DTCoreTextLayoutFrame.h</DeclaredIn>			
			
			<Declaration>+ (void)setShouldDrawDebugFrames:(BOOL)debugFrames</Declaration>
			<Parameters>
				<Parameter>
					<Name>debugFrames</Name>
					<Abstract>if the debug drawing should occur</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setShouldDrawDebugFrames:</Anchor>
		</Token>
		
	</File>
</Tokens>