<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/DTCoreTextParagraphStyle.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/DTCoreTextParagraphStyle</TokenIdentifier>
			<Abstract>DTCoreTextParagraphStyle encapsulates the paragraph or ruler attributes used by the NSAttributedString classes on iOS. It is a replacement for NSParagraphStyle which is not implemented on iOS.</Abstract>
			<DeclaredIn>DTCoreTextParagraphStyle.h</DeclaredIn>
			
			<NodeRef refid="12"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/DTCoreTextParagraphStyle/defaultParagraphStyle</TokenIdentifier>
			<Abstract>Returns the default paragraph style.</Abstract>
			<DeclaredIn>DTCoreTextParagraphStyle.h</DeclaredIn>			
			
			<Declaration>+ (DTCoreTextParagraphStyle *)defaultParagraphStyle</Declaration>
			
			
			<Anchor>//api/name/defaultParagraphStyle</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/DTCoreTextParagraphStyle/paragraphStyleWithCTParagraphStyle:</TokenIdentifier>
			<Abstract>Create a new paragraph style instance from a CTParagraphStyle.</Abstract>
			<DeclaredIn>DTCoreTextParagraphStyle.h</DeclaredIn>			
			
			<Declaration>+ (DTCoreTextParagraphStyle *)paragraphStyleWithCTParagraphStyle:(CTParagraphStyleRef)ctParagraphStyle</Declaration>
			<Parameters>
				<Parameter>
					<Name>ctParagraphStyle</Name>
					<Abstract>the CTParagraphStyle from which to copy this new style's attributes.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/paragraphStyleWithCTParagraphStyle:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTCoreTextParagraphStyle/initWithCTParagraphStyle:</TokenIdentifier>
			<Abstract>Create a new paragraph style instance from a CTParagraphStyle.</Abstract>
			<DeclaredIn>DTCoreTextParagraphStyle.h</DeclaredIn>			
			
			<Declaration>- (id)initWithCTParagraphStyle:(CTParagraphStyleRef)ctParagraphStyle</Declaration>
			<Parameters>
				<Parameter>
					<Name>ctParagraphStyle</Name>
					<Abstract>the CTParagraphStyle from which to copy this new style's attributes.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithCTParagraphStyle:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTCoreTextParagraphStyle/createCTParagraphStyle</TokenIdentifier>
			<Abstract>Create a new CTParagraphStyle from the receiver for use as attributed in NSAttributedString</Abstract>
			<DeclaredIn>DTCoreTextParagraphStyle.h</DeclaredIn>			
			
			<Declaration>- (CTParagraphStyleRef)createCTParagraphStyle</Declaration>
			
			<ReturnValue><Abstract>The CTParagraphStyle based on the receiver's attributes.</Abstract></ReturnValue>
			<Anchor>//api/name/createCTParagraphStyle</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DTCoreTextParagraphStyle/firstLineHeadIndent</TokenIdentifier>
			<Abstract>The indentation of the first line of the receiver.</Abstract>
			<DeclaredIn>DTCoreTextParagraphStyle.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CGFloat firstLineHeadIndent</Declaration>
			
			
			<Anchor>//api/name/firstLineHeadIndent</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DTCoreTextParagraphStyle/defaultTabInterval</TokenIdentifier>
			<Abstract>  The document-wide default tab interval.</Abstract>
			<DeclaredIn>DTCoreTextParagraphStyle.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CGFloat defaultTabInterval</Declaration>
			
			
			<Anchor>//api/name/defaultTabInterval</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DTCoreTextParagraphStyle/paragraphSpacingBefore</TokenIdentifier>
			<Abstract>The distance between the paragraphâ€™s top and the beginning of its text content.</Abstract>
			<DeclaredIn>DTCoreTextParagraphStyle.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CGFloat paragraphSpacingBefore</Declaration>
			
			
			<Anchor>//api/name/paragraphSpacingBefore</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DTCoreTextParagraphStyle/paragraphSpacing</TokenIdentifier>
			<Abstract>The space after the end of the paragraph.</Abstract>
			<DeclaredIn>DTCoreTextParagraphStyle.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CGFloat paragraphSpacing</Declaration>
			
			
			<Anchor>//api/name/paragraphSpacing</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DTCoreTextParagraphStyle/lineHeightMultiple</TokenIdentifier>
			<Abstract>The line height multiple.</Abstract>
			<DeclaredIn>DTCoreTextParagraphStyle.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CGFloat lineHeightMultiple</Declaration>
			
			
			<Anchor>//api/name/lineHeightMultiple</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DTCoreTextParagraphStyle/minimumLineHeight</TokenIdentifier>
			<Abstract>The minimum height in points that any line in the receiver will occupy, regardless of the font size or size of any attached graphic. This value is always nonnegative.</Abstract>
			<DeclaredIn>DTCoreTextParagraphStyle.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CGFloat minimumLineHeight</Declaration>
			
			
			<Anchor>//api/name/minimumLineHeight</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DTCoreTextParagraphStyle/maximumLineHeight</TokenIdentifier>
			<Abstract>The maximum height in points that any line in the receiver will occupy, regardless of the font size or size of any attached graphic. This value is always nonnegative. The default value is 0.</Abstract>
			<DeclaredIn>DTCoreTextParagraphStyle.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CGFloat maximumLineHeight</Declaration>
			
			
			<Anchor>//api/name/maximumLineHeight</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DTCoreTextParagraphStyle/headIndent</TokenIdentifier>
			<Abstract>The distance in points from the leading margin of a text container to the beginning of lines other than the first. This value is always nonnegative.</Abstract>
			<DeclaredIn>DTCoreTextParagraphStyle.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CGFloat headIndent</Declaration>
			
			
			<Anchor>//api/name/headIndent</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DTCoreTextParagraphStyle/alignment</TokenIdentifier>
			<Abstract>The text alignment of the receiver.</Abstract>
			<DeclaredIn>DTCoreTextParagraphStyle.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CTTextAlignment alignment</Declaration>
			
			
			<Anchor>//api/name/alignment</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DTCoreTextParagraphStyle/baseWritingDirection</TokenIdentifier>
			<Abstract>The base writing direction for the receiver.</Abstract>
			<DeclaredIn>DTCoreTextParagraphStyle.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CTWritingDirection baseWritingDirection</Declaration>
			
			
			<Anchor>//api/name/baseWritingDirection</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DTCoreTextParagraphStyle/tabStops</TokenIdentifier>
			<Abstract>The CTTextTab objects, sorted by location, that define the tab stops for the paragraph style.</Abstract>
			<DeclaredIn>DTCoreTextParagraphStyle.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, copy) NSArray *tabStops</Declaration>
			
			
			<Anchor>//api/name/tabStops</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTCoreTextParagraphStyle/addTabStopAtPosition:alignment:</TokenIdentifier>
			<Abstract>  Adds a tab stop to the receiver.</Abstract>
			<DeclaredIn>DTCoreTextParagraphStyle.h</DeclaredIn>			
			
			<Declaration>- (void)addTabStopAtPosition:(CGFloat)position alignment:(CTTextAlignment)alignment</Declaration>
			<Parameters>
				<Parameter>
					<Name>position</Name>
					<Abstract>the tab stop position</Abstract>
				</Parameter><Parameter>
					<Name>alignment</Name>
					<Abstract>the tab alignment for this tab stop</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addTabStopAtPosition:alignment:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTCoreTextParagraphStyle/cssStyleRepresentation</TokenIdentifier>
			<Abstract>Create a representation suitable for CSS.</Abstract>
			<DeclaredIn>DTCoreTextParagraphStyle.h</DeclaredIn>			
			
			<Declaration>- (NSString *)cssStyleRepresentation</Declaration>
			
			<ReturnValue><Abstract>A string with the receiver's style encoded as CSS.</Abstract></ReturnValue>
			<Anchor>//api/name/cssStyleRepresentation</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DTCoreTextParagraphStyle/textLists</TokenIdentifier>
			<Abstract>Text lists containing the paragraph, nested from outermost to innermost, to array.</Abstract>
			<DeclaredIn>DTCoreTextParagraphStyle.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, copy) NSArray *textLists</Declaration>
			
			
			<Anchor>//api/name/textLists</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DTCoreTextParagraphStyle/listIndent</TokenIdentifier>
			<Abstract>The amount by which each list level is indented from the previous. NOTE: about to be replaced by textLists property.</Abstract>
			<DeclaredIn>DTCoreTextParagraphStyle.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CGFloat listIndent</Declaration>
			
			
			<Anchor>//api/name/listIndent</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DTCoreTextParagraphStyle/textBlocks</TokenIdentifier>
			<Abstract>Text lists containing the paragraph, nested from outermost to innermost, to array.</Abstract>
			<DeclaredIn>DTCoreTextParagraphStyle.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, copy) NSArray *textBlocks</Declaration>
			
			
			<Anchor>//api/name/textBlocks</Anchor>
		</Token>
		
	</File>
</Tokens>