<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/DTHTMLParser.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/DTHTMLParser</TokenIdentifier>
			<Abstract>Instances of this class parse HTML documents (including DTD declarations) in an event-driven manner. A DTHTMLParser notifies its delegate about the items (elements, attributes, CDATA blocks, comments, and so on) that it encounters as it processes an HTML document. It does not itself do anything with those parsed items except report them. It also reports parsing errors. For convenience, an DTHTMLParser object in the following descriptions is sometimes referred to as a parser object.</Abstract>
			<DeclaredIn>DTHTMLParser.h</DeclaredIn>
			
			<NodeRef refid="15"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTHTMLParser/initWithData:encoding:</TokenIdentifier>
			<Abstract>Initializes the receiver with the HTML contents encapsulated in a given data object.</Abstract>
			<DeclaredIn>DTHTMLParser.h</DeclaredIn>			
			
			<Declaration>- (id)initWithData:(NSData *)data encoding:(NSStringEncoding)encoding</Declaration>
			<Parameters>
				<Parameter>
					<Name>data</Name>
					<Abstract>An NSData object containing XML markup.</Abstract>
				</Parameter><Parameter>
					<Name>encoding</Name>
					<Abstract>The encoding used for encoding the HTML data</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>An initialized DTHTMLParser object or nil if an error occurs.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithData:encoding:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTHTMLParser/parse</TokenIdentifier>
			<Abstract>Starts the event-driven parsing operation.</Abstract>
			<DeclaredIn>DTHTMLParser.h</DeclaredIn>			
			
			<Declaration>- (BOOL)parse</Declaration>
			
			<ReturnValue><Abstract>YES if parsing is successful and NO in there is an error or if the parsing operation is aborted.</Abstract></ReturnValue>
			<Anchor>//api/name/parse</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTHTMLParser/abortParsing</TokenIdentifier>
			<Abstract>Stops the parser object.</Abstract>
			<DeclaredIn>DTHTMLParser.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/DTHTMLParser/parse</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instp/DTHTMLParser/parserError</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)abortParsing</Declaration>
			
			
			<Anchor>//api/name/abortParsing</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTHTMLParser/setDelegate:</TokenIdentifier>
			<Abstract>Sets the receiver’s delegate.</Abstract>
			<DeclaredIn>DTHTMLParser.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/DTHTMLParser/delegate</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)setDelegate:(id&lt;DTHTMLParserDelegate&gt;)delegate</Declaration>
			<Parameters>
				<Parameter>
					<Name>delegate</Name>
					<Abstract>An object that is the new delegate. It is not retained. The delegate must conform to the DTHTMLParserDelegate Protocol protocol.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDelegate:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DTHTMLParser/delegate</TokenIdentifier>
			<Abstract>Returns the receiver’s delegate.</Abstract>
			<DeclaredIn>DTHTMLParser.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/DTHTMLParser/delegate</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (id&lt;DTHTMLParserDelegate&gt;)delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DTHTMLParser/columnNumber</TokenIdentifier>
			<Abstract>Returns the column number of the XML document being processed by the receiver.</Abstract>
			<DeclaredIn>DTHTMLParser.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSInteger columnNumber</Declaration>
			
			
			<Anchor>//api/name/columnNumber</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DTHTMLParser/lineNumber</TokenIdentifier>
			<Abstract>Returns the line number of the HTML document being processed by the receiver.</Abstract>
			<DeclaredIn>DTHTMLParser.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSInteger lineNumber</Declaration>
			
			
			<Anchor>//api/name/lineNumber</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DTHTMLParser/parserError</TokenIdentifier>
			<Abstract>Returns an NSError object from which you can obtain information about a parsing error.</Abstract>
			<DeclaredIn>DTHTMLParser.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, strong) NSError *parserError</Declaration>
			
			
			<Anchor>//api/name/parserError</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DTHTMLParser/publicID</TokenIdentifier>
			<Abstract>Returns the public identifier of the external entity referenced in the HTML document.</Abstract>
			<DeclaredIn>DTHTMLParser.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSString *publicID</Declaration>
			
			
			<Anchor>//api/name/publicID</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DTHTMLParser/systemID</TokenIdentifier>
			<Abstract>Returns the system identifier of the external entity referenced in the HTML document.</Abstract>
			<DeclaredIn>DTHTMLParser.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSString *systemID</Declaration>
			
			
			<Anchor>//api/name/systemID</Anchor>
		</Token>
		
	</File>
</Tokens>